#+TITLE: Emacs Config
#+AUTHOR: Ralph Dreijer

* General
** Load use-package
#+begin_src emacs-lisp
  (require 'package)
  (require 'use-package)
  (require 'use-package-ensure)

  (setq use-package-always-ensure t)
  (package-initialize)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src

** Set custom file
#+begin_src emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

** Load scripts 
Add scripts folder to load path:
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/scripts/")
#+end_src

Source scripts:
#+begin_src emacs-lisp
(require 'buffer-move)
(require 'multi-term)
#+end_src

** Dracula theme
#+begin_src emacs-lisp
  (use-package dracula-theme
   :config
   (load-theme 'dracula)
  )
#+end_src

** Modeline
*** Diminished modes
Don't show all minor modes in the mode line
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src

*** Show word count
#+begin_src emacs-lisp
  (use-package wc-mode
    :ensure t
    )
#+end_src

** Misc. UI tweaks
#+begin_src emacs-lisp
  (scroll-bar-mode -1) ;; Hide scrollbar
  (tool-bar-mode -1) ;; Hide toolbar
  (menu-bar-mode -1) ;; Hide menubar

  (setq inhibit-startup-screen t) ;; Disable startup screen
  (add-to-list 'initial-frame-alist '(fullscreen . maximized)) ;; Maximize on startup

  (setopt use-short-answers t) ;; use y/n in prompts instead of typing out yes/no
#+end_src

Enable line numbering:
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)
#+end_src

** Ivy, Counsel
Copied from [[https://gitlab.com/dwt1/configuring-emacs/-/blob/main/07-the-final-touches/config.org][DT's Emacs config]]:

+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :diminish
    :config 
      (counsel-mode)
      (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x

  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :diminish
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))
#+end_src

** Golden ratio
Auto-resize windows
#+begin_src emacs-lisp
  (use-package golden-ratio
    :ensure t
    :config
    (setq golden-ratio-auto-scale t)
    (golden-ratio-mode 1)
    )
#+end_src

Fix which-key (copied from [[https://github.com/roman/golden-ratio.el/issues/82#issuecomment-806822915][here]])
#+begin_src emacs-lisp
  (with-eval-after-load "which-key"
    (add-to-list 'golden-ratio-inhibit-functions
                 (lambda ()
                   (and which-key--buffer
                        (window-live-p (get-buffer-window which-key--buffer))))))
#+end_src

** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay        0.5
	    treemacs-directory-name-transformer      #'identity
	    treemacs-display-in-side-window          t
	    treemacs-eldoc-display                   'simple
	    treemacs-file-event-delay                2000
	    treemacs-file-extension-regex            treemacs-last-period-regex-value
	    treemacs-file-follow-delay               0.2
	    treemacs-file-name-transformer           #'identity
	    treemacs-follow-after-init               t
	    treemacs-expand-after-init               t
	    treemacs-find-workspace-method           'find-for-file-or-pick-first
	    treemacs-git-command-pipe                ""
	    treemacs-goto-tag-strategy               'refetch-index
	    treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	    treemacs-hide-dot-git-directory          t
	    treemacs-indentation                     2
	    treemacs-indentation-string              " "
	    treemacs-is-never-other-window           nil
	    treemacs-max-git-entries                 5000
	    treemacs-missing-project-action          'ask
	    treemacs-move-files-by-mouse-dragging    t
	    treemacs-move-forward-on-expand          nil
	    treemacs-no-png-images                   nil
	    treemacs-no-delete-other-windows         t
	    treemacs-project-follow-cleanup          nil
	    treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	    treemacs-position                        'left
	    treemacs-read-string-input               'from-child-frame
	    treemacs-recenter-distance               0.1
	    treemacs-recenter-after-file-follow      nil
	    treemacs-recenter-after-tag-follow       nil
	    treemacs-recenter-after-project-jump     'always
	    treemacs-recenter-after-project-expand   'on-distance
	    treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	    treemacs-project-follow-into-home        nil
	    treemacs-show-cursor                     nil
	    treemacs-show-hidden-files               t
	    treemacs-silent-filewatch                nil
	    treemacs-silent-refresh                  nil
	    treemacs-sorting                         'alphabetic-asc
	    treemacs-select-when-already-in-treemacs 'move-back
	    treemacs-space-between-root-nodes        t
	    treemacs-tag-follow-cleanup              t
	    treemacs-tag-follow-delay                1.5
	    treemacs-text-scale                      nil
	    treemacs-user-mode-line-format           nil
	    treemacs-user-header-line-format         nil
	    treemacs-wide-toggle-width               70
	    treemacs-width                           35
	    treemacs-width-increment                 1
	    treemacs-width-is-initially-locked       t
	    treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
	(treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
	  ("C-/"       . treemacs-select-window)
	  ;; ("C-x t 1"   . treemacs-delete-other-windows)
	  ("<f1>"   . treemacs)
	  ;; ("C-x t d"   . treemacs-select-directory)
	  ;; ("C-x t B"   . treemacs-bookmark)
	  ;; ("C-x t C-t" . treemacs-find-file)
	  ;; ("C-x t M-t" . treemacs-find-tag)
	  ))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  ;; (use-package treemacs-projectile
  ;;   :after (treemacs projectile)
  ;;   :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  ;; (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  ;;   :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  ;;   :ensure t
  ;;   :config (treemacs-set-scope-type 'Perspectives))

  ;; (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  ;;   :after (treemacs)
  ;;   :ensure t
  ;;   :config (treemacs-set-scope-type 'Tabs))

  (treemacs-start-on-boot)
#+end_src

** Auto-Complete
#+begin_src emacs-lisp
  (use-package auto-complete
    :ensure t
    :config 
    (ac-config-default)
    )
#+end_src

** Git
*** Magit
#+begin_src emacs-lisp
    (use-package magit
    :ensure t
  )
#+end_src

*** Diff-hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :after evil
    :config
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    (evil-define-key 'motion diff-hl-mode-map (kbd "[ g") #'diff-hl-previous-hunk)
    (evil-define-key 'motion diff-hl-mode-map (kbd "] g") #'diff-hl-next-hunk)
    (global-diff-hl-mode)
    )
#+end_src

** Flyspell
[[https://www.emacswiki.org/emacs/FlySpell#h5o-3][Copied from EmacsWiki:]]
#+begin_src emacs-lisp
  (defun flyspell-on-for-buffer-type ()
    "Enable Flyspell appropriately for the major mode of the current buffer.  Uses `flyspell-prog-mode' for modes derived from `prog-mode', so only strings and comments get checked.  All other buffers get `flyspell-mode' to check all text.  If flyspell is already enabled, does nothing."
    (interactive)
    (if (not (symbol-value flyspell-mode)) ; if not already on
        (progn
          (if (derived-mode-p 'prog-mode)
              (progn
                (message "Flyspell on (code)")
                (flyspell-prog-mode))
            ;; else
            (progn
              (message "Flyspell on (text)")
              (flyspell-mode 1)))
          (flyspell-buffer)
          )))

  (defun flyspell-toggle ()
    "Turn Flyspell on if it is off, or off if it is on.  When turning on, it uses `flyspell-on-for-buffer-type' so code-vs-text is handled appropriately."
    (interactive)
    (if (symbol-value flyspell-mode)
        (progn ; flyspell is on, turn it off
          (message "Flyspell off")
          (flyspell-mode -1))
                                          ; else - flyspell is off, turn it on
      (flyspell-on-for-buffer-type)))
#+end_src

** highlight-indent-guides.el
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :diminish
    :ensure t
    :config
    (setq highlight-indent-guides-method 'bitmap)
    (setq highlight-indent-guides-auto-character-face-perc 35)
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    )
#+end_src

** SSH stuff
Get hosts from ssh config file:
#+begin_src emacs-lisp
  (defun parse-ssh-config-hosts (ssh-config-file)
    "Parse the SSH config file and return a list of hosts."
    (let ((hosts '()))
      (when (file-readable-p ssh-config-file)
        (with-temp-buffer
          (insert-file-contents ssh-config-file)
          (goto-char (point-min))
          (while (re-search-forward "^Host[ \t]+\\(.*\\)$" nil t)
            (let ((host-line (match-string 1)))
              (dolist (host (split-string host-line))
                (unless (string-match-p "[*?]" host) ;; Ignore wildcards
                  (push host hosts)))))))
      (delete-dups hosts)))
#+end_src

Make an ivy menu for it:
#+begin_src emacs-lisp
  (defun ivy-ssh-config-hosts ()
    "Return a selected SSH host from the SSH config file using Ivy."
    (let* ((ssh-config-file (expand-file-name "~/.ssh/config"))
           (hosts (parse-ssh-config-hosts ssh-config-file)))
      (if hosts
          (ivy-read "SSH Hosts: " hosts)
        (user-error "No hosts found in %s" ssh-config-file))))
#+end_src

*** SSH find file
#+begin_src emacs-lisp
  (defun find-file-ssh ()
    "Open a file on a remote SSH host."
    (interactive)
    (let* ((host (ivy-ssh-config-hosts))
           (default-directory (concat "/ssh:" host ":")))
      (call-interactively #'counsel-find-file)))
#+end_src

*** SSH Terminal
#+begin_src emacs-lisp
  (defun ssh-multi-term ()
    (interactive)
    (let* (
           (host (ivy-ssh-config-hosts))
           (multi-term-program "/bin/sh")
           (multi-term-buffer-name (format "SSH: %s" host))
           (term-cmd (format "ssh %s\n" host))
           (term-buffer (multi-term))
           )
      (term-send-raw-string term-cmd)
      ))
#+end_src

** Open current buffer externally
Largely copied from treemacs-interface.el (treemacs-visit-node-in-external-application)

#+begin_src emacs-lisp
  (defun open-this-externally ()
    "Open current file according to its mime type in an external application.
  Treemacs knows how to open files on linux, windows and macos."
    (interactive)
    ;; code adapted from ranger.el
    (-if-let (path (buffer-file-name))
        (pcase system-type
          ('windows-nt
           (declare-function w32-shell-execute "w32fns.c")
           (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" path t t)))
          ('darwin
           (shell-command (format "open \"%s\"" path)))
          ('gnu/linux
           (let (process-connection-type)
             (start-process
              "" nil "sh" "-c"
              ;; XXX workaround for #633
              (format "xdg-open %s; sleep 1"
                      (shell-quote-argument path)))))
          (_ (message "Don't know how to open files on %s.")))
      (message "Nothing to open here.")))
#+end_src

* Keybindings
** Evil mode
Setup vim-like keybindings using evil-mode:
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-undo-system 'undo-redo)
    (setq evil-want-fine-undo t)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-want-C-d-scroll t)
    (setq evil-want-C-u-scroll t)
    ;; Needed for evil-collection (see below):
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    )

  (use-package evil-collection
    :diminish evil-collection-unimpaired-mode
    :after evil
    :ensure t
    :config
    (evil-collection-init)
    )
#+end_src

Disable evil's RET keybinding (conflicts with org-return, and is useless anyway)
#+begin_src emacs-lisp
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "RET") nil))
#+end_src

Add /vim-commentary/-like motions:
#+begin_src emacs-lisp
  (use-package evil-commentary
    :diminish
    :config
    (evil-commentary-mode)
    )
#+end_src

Use *evil-goggles* to give visual feedback:
#+begin_src emacs-lisp
  (use-package evil-goggles
    :diminish
    :ensure t
    :config
    (evil-goggles-mode)

    ;; optionally use diff-mode's faces; as a result, deleted text
    ;; will be highlighed with `diff-removed` face which is typically
    ;; some red color (as defined by the color theme)
    ;; other faces such as `diff-added` will be used for other actions
    (evil-goggles-use-diff-faces)

    ;; this variable affects "blocking" hints, for example when deleting - the hint is displayed,
    ;; the deletion is delayed (blocked) until the hint disappers, then the hint is removed and the
    ;; deletion executed; it makes sense to have this duration short
    (setq evil-goggles-blocking-duration 0.100) ;; default is nil, i.e. use `evil-goggles-duration'

    ;; this variable affects "async" hints, for example when indenting - the indentation
    ;; is performed with the hint visible, i.e. the hint is displayed, the action (indent) is
    ;; executed (asynchronous), then the hint is removed, highlighting the result of the indentation
    (setq evil-goggles-async-duration 0.300) ;; default is nil, i.e. use `evil-goggles-duration'
    )
#+end_src

*evil-numbers*: c-a and c-x like in vim:
#+begin_src emacs-lisp
  (use-package evil-numbers
    :ensure t
    :config
    (evil-define-key '(normal visual) 'global (kbd "C-a") 'evil-numbers/inc-at-pt)
    (evil-define-key '(normal visual) 'global (kbd "C-x") 'evil-numbers/dec-at-pt)
    (evil-define-key '(normal visual) 'global (kbd "g C-a") 'evil-numbers/inc-at-pt-incremental)
    (evil-define-key '(normal visual) 'global (kbd "g C-x") 'evil-numbers/dec-at-pt-incremental)
  )
#+end_src

** General.el
Install general.el and define some global keybindings.
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

    ;; set up 'SPC' as the global leader key
    (general-create-definer my-leader-def
      :states '(normal insert visual emacs treemacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "C-SPC") ;; access leader in insert mode

    (my-leader-def
      "SPC" '(counsel-M-x :wk "Run Command")
      "." '(counsel-command-history :wk "Command History")

      "b" '(:ignore t :wk "Buffers")
      "b b" '(counsel-switch-buffer :wk "Switch to buffer")
      "b i" '(ibuffer :wk "Ibuffer")
      "b k" '(kill-current-buffer :wk "Kill this buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b o" '(counsel-switch-buffer-other-window :wk "Switch buffer Other window")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(rename-buffer :wk "Rename buffer")
      "b x" '(kill-buffer-and-window :wk "Kill buffer, close window")

      ;; FILES
      "f" '(:ignore t :wk "Files")
      "f f" '(counsel-find-file :wk "Find file")
      "f o" '(find-file-other-window :wk "Find file Other window")
      "f r" '(counsel-recentf :wk "Recent files")
      "f s" '(find-file-ssh :wk "Find file (SSH)")
      ;; Treemacs
      "f t" '(:ignore t :wk "Treemacs")
      "f t a" '(treemacs-add-project-to-workspace :wk "Add project to workspace")
      "f t c" '(treemacs-create-workspace :wk "Create workspace")
      "f t d" '(treemacs-remove-workspace :wk "Delete workspace")
      "f t e" '(treemacs-edit-workspaces :wk "Edit workspaces")
      "f t r" '(treemacs-remove-project-from-workspace :wk "Remove project from workspace")
      "f t s" '((lambda () (interactive)
  		(let (treemacs-select-when-already-in-treemacs stay)
  		  (treemacs-select-window t)))
  	      :wk "Switch workspace")

      ;; GIT
      "g" '(:ignore t :wk "Git")
      "g g" '(magit-status :wk "Magit")
      "g r" '(diff-hl-revert-hunk :wk "Revert hunk")
      "g s" '(diff-hl-show-hunk :wk "Show hunk")
      "g v" '(diff-hl-mode :wk "Toggle diff highlighting")

      ;; SPELL CHECKING
      "s" '(:ignore t :wk "Spell Checking")
      "s s" '(flyspell-toggle :wk "Toggle")
      "s b" '(flyspell-buffer :wk "Scan Buffer")
      "s d" '(ispell-change-dictionary :wk "Change dictionary")

      ;; TERMINAL
      "t" '(:ignore t :wk "Terminal")
      "t n" '(multi-term-next :wk "Next Terminal")
      "t p" '(multi-term-prev :wk "Previous Terminal")
      "t s" '(ssh-multi-term :wk "SSH connection")
      "t t" '(multi-term :wk "New Terminal")

      ;; VIEW
      "v" '(:ignore t :wk "View")
      "v g" '(diff-hl-mode :wk "Git Diff Highlighting")
      "v l" '(display-line-numbers-mode :wk "Line numbers")
      "v t" '(toggle-truncate-lines :wk "Truncate lines")
      "v v" '(visual-line-mode :wk "Visual line mode")

      ;; WINDOWS
      "w" '(:ignore t :wk "Windows")
      ;; Window splits
      "w c" '(evil-window-delete :wk "Close window")
      "w n" '(evil-window-new :wk "New window")
      "w s" '(evil-window-split :wk "Horizontal split window")
      "w v" '(evil-window-vsplit :wk "Vertical split window")
      "w x" '(kill-buffer-and-window :wk "Kill buffer, close window")
      ;; Window motions
      "w h" '(evil-window-left :wk "Window left")
      "w j" '(evil-window-down :wk "Window down")
      "w k" '(evil-window-up :wk "Window up")
      "w l" '(evil-window-right :wk "Window right")
      "w w" '(evil-window-next :wk "Goto next window")
      ;; Move Windows
      "w H" '(buf-move-left :wk "Buffer move left")
      "w J" '(buf-move-down :wk "Buffer move down")
      "w K" '(buf-move-up :wk "Buffer move up")
      "w L" '(buf-move-right :wk "Buffer move right")
      ))
#+end_src

** Which key
To see what keybindings actually do...
#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :config
    (setq which-key-idle-delay 0)
    (which-key-mode)
    (which-key-setup-side-window-bottom)
    )
#+end_src

** Use escape key instead of ctrl-g:
#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* Text editing: Org Mode, LaTeX, etc.
** Org Mode
*** Hooks
Automatically enable org-indent-mode, visual-line-mode
*Org-tempo* allows for example '<s' to be expanded to a source block
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook (lambda () (require 'org-tempo)))
#+end_src

*** Variables
**** LaTeX syntax highlighting
Setup $\LaTeX$ syntax highlighting
#+begin_src emacs-lisp
  (setq org-highlight-latex-and-related '(latex script entities))
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
#+end_src

**** LaTeX export settings
Define LaTeX classes:
#+begin_src emacs-lisp
  (setq org-latex-classes 
        '(("article" "\\documentclass[11pt,a4paper]{article} \\usepackage[margin=2.5cm]{geometry}"
  	 ("\\section{%s}" . "\\section*{%s}")
  	 ("\\subsection{%s}" . "\\subsection*{%s}")
  	 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  	 ("\\paragraph{%s}" . "\\paragraph*{%s}")
  	 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
  	("notes" "\\documentclass[11pt,a4paper,twocolumn]{article} \\usepackage[margin=1.5cm]{geometry}"
  	 ("\\section{%s}" . "\\section*{%s}")
  	 ("\\subsection{%s}" . "\\subsection*{%s}")
  	 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  	 ("\\paragraph{%s}" . "\\paragraph*{%s}")
  	 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
  	("report" "\\documentclass[11pt,a4paper]{report} \\usepackage[margin=2.5cm]{geometry}"
  	 ;; ("\\part{%s}" . "\\part*{%s}")
  	 ("\\chapter{%s}" . "\\chapter*{%s}")
  	 ("\\section{%s}" . "\\section*{%s}")
  	 ("\\subsection{%s}" . "\\subsection*{%s}")
  	 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  	 ("\\paragraph{%s}" . "\\paragraph*{%s}")
  	 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
  	("book" "\\documentclass[11pt,a4paper]{book}"
  	 ("\\part{%s}" . "\\part*{%s}")
  	 ("\\chapter{%s}" . "\\chapter*{%s}")
  	 ("\\section{%s}" . "\\section*{%s}")
  	 ("\\subsection{%s}" . "\\subsection*{%s}")
  	 ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+end_src

Set default class to notes:
#+begin_src emacs-lisp
  (setq org-latex-default-class "notes")
#+end_src

Default export options:
#+begin_src emacs-lisp
  (setq
   org-export-headline-levels 6
   org-export-with-priority nil
   org-export-with-statistics-cookies nil
   org-export-with-tags nil
   org-export-with-toc nil
   org-export-with-todo-keywords nil
   )
#+end_src

**** Startup options
#+begin_src emacs-lisp
  (setq
   org-startup-folded 'overview
   org-startup-with-inline-images t
   org-startup-with-latex-preview t
   org-pretty-entities t
   )
#+end_src

**** Misc. other variables
#+begin_src emacs-lisp
  (setq org-image-actual-width 400)
  (setq org-return-follows-link t)
#+end_src

*** Org-download
For inserting images

#+begin_src emacs-lisp
  (use-package org-download
    :after org
    :custom
    (org-download-method 'directory)
    (org-download-image-dir "./org-images")
    (org-download-heading-lvl nil)
    )

  ;; Drag-and-drop to `dired`
  (add-hook 'dired-mode-hook 'org-download-enable)
#+end_src

*** (Slightly) better versions of org commands
**** org-indent-block
...but the cursor doesn't have to be at the head of a block
#+begin_src emacs-lisp
  (defun better-org-indent-block ()
    (interactive)
    (org-babel-goto-src-block-head)
    (org-indent-block)
    )
#+end_src

**** org-insert-heading
Inserting headings (ctrl-enter) but 0.001% faster by going into insert mode:
#+begin_src emacs-lisp
  (defun better-org-insert-heading ()
    (interactive)
    (org-insert-heading-respect-content)
    (evil-insert 1)
    )

  (defun better-org-insert-todo-heading ()
    (interactive)
    (org-insert-todo-heading-respect-content)
    (evil-insert 1)
    )

  (with-eval-after-load "org"
    (define-key org-mode-map (kbd "C-<return>") #'better-org-insert-heading)
    (define-key org-mode-map (kbd "C-S-<return>") #'better-org-insert-todo-heading))
#+end_src

**** org-insert-link
Define a function for inserting a link from a url (and adds title as description):
#+begin_src emacs-lisp
  (defun org-insert-link-from-url (url)
    (org-insert-link nil url
                     (with-current-buffer (url-retrieve-synchronously url)
                       (goto-char (point-min))
                       (re-search-forward "\n\n") ;; Skip HTTP headers
                       (let ((dom (libxml-parse-html-region (point) (point-max))))
                         (dom-text (car (dom-by-tag dom 'title)))
                         ))))
#+end_src

Define a command that:
1) Currently at link? Call org-insert-link interactively
2) Clipboard contains url? Call org-insert-link-from-url
3) Else call org-insert-link interactively
#+begin_src emacs-lisp
  (defun better-org-insert-link ()
    (interactive)
    (if (org-in-regexp org-link-bracket-re 1)
        (call-interactively #'org-insert-link)
      (let ((clip (string-clean-whitespace (current-kill 0))))
        (if (string-match "^https?://[^ ]+$" clip)
            (org-insert-link-from-url clip)
          (call-interactively #'org-insert-link)
          ))))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
  (my-leader-def org-mode-map
    "c" '("Org mode" . (keymap))

    ;; Code blocks
    "c b" '("Code block" . (keymap))
    "c b i" '("Indent block" . better-org-indent-block)
    "c b r" '("Hide/show result" . org-babel-hide-result-toggle)
    "c b R" '("Remove result" . org-babel-remove-result)
    "c b C-r" '("Remove ALL results" .
                (lambda () (interactive) (org-babel-remove-result-one-or-many 1)))
    "c b t" '("Tangle" . org-babel-tangle)

    ;; For working with images
    "c i" '("Image" . (keymap))
    "c i d" '("Delete image" . org-download-delete)
    "c i i" '("Toggle inline images" . org-toggle-inline-images)
    "c i p" '("Paste from clipboard" . org-download-clipboard)
    "c i P" '("Paste from link" . org-download-yank)

    ;; Other misc shortcuts
    "c c" '("Context action" . org-ctrl-c-ctrl-c)
    "c e" '("Export" . org-export-dispatch)
    "c l" '("Insert link" . better-org-insert-link)
    "c L" '("Toggle LaTeX preview" . org-latex-preview)
    "c h" '("Toggle heading" . org-toggle-heading)
    "c p" '("Toggle pretty entities" . org-toggle-pretty-entities)
    "c s" '("Sort" . org-sort)
    )
#+end_src

** PDF Tools
To view PDFs inside Emacs
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install)
    )
#+end_src

** LaTeX
Install AucTeX and do some [[https://www.emacswiki.org/emacs/AUCTeX#h5o-2][customary customization]]:
#+begin_src emacs-lisp
  (use-package auctex)

  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)

  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
#+end_src

Open PDFs in Emacs: 
#+begin_src emacs-lisp
  ;; Use pdf-tools to open PDF files
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-source-correlate-start-server t)

  ;; Update PDF buffers after successful LaTeX runs
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
#+end_src

*** Keybindings
#+begin_src emacs-lisp
  (my-leader-def LaTeX-mode-map
    "c" '("LaTeX" . (keymap))

    "c a" '("Run all commands" . TeX-command-run-all)
    "c c" '("Command" . TeX-command-master)
    "c e" '("Environment" . LaTeX-environment)
    "c s" '("Section" . LaTeX-section)
    )
#+end_src

*** Word-count function
Use detex output for word count
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (setq-local wc-count-words-function
                          (function (lambda (rstart rend)
                                      (let* ((output-buffer-name "*detex-output*")
                                             (output-buffer (generate-new-buffer output-buffer-name)))
                                        (unwind-protect
                                            (progn
                                              (call-process-region rstart rend "detex"
                                                                   nil output-buffer-name nil)
                                              (with-current-buffer output-buffer
                                                (count-words (point-min) (point-max))))
                                          (kill-buffer output-buffer))))))))
#+end_src

** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init
    (setq markdown-command "pandoc")
    (setq markdown-enable-math t)
    )
#+end_src

* Web development
** Launch HTTP Server
#+begin_src emacs-lisp
  (defun http-server () (interactive)
         (let ((dir (read-from-minibuffer "Directory: " default-directory))
               (port (read-from-minibuffer "Port: " "8000")))
           (async-shell-command (concat "python3 -m http.server -d " dir " " port)
                                (concat "*HTTP Server on port " port " [" dir "]*"))
           (start-process "" nil "firefox" "--new-tab" (concat "http://localhost:" port))))
#+end_src

* Arduino
Install *arduino-mode* for syntax highlighting:
#+begin_src emacs-lisp
  (use-package arduino-mode
    :ensure t)
#+end_src

Install *arduino-cli-mode* for compiling and uploading:
#+begin_src emacs-lisp
  (use-package arduino-cli-mode
    :ensure t
    :hook arduino-mode
    ;; :mode "\\.ino\\'"
    :custom
    (arduino-cli-warnings 'all)
    (arduino-cli-verify t))
#+end_src

* Python
** Pyenv mode
#+begin_src emacs-lisp
  (use-package pyenv-mode
    :ensure t
    :config
    (pyenv-mode)
    )
#+end_src

** Keybindings
#+begin_src emacs-lisp
  (my-leader-def python-mode-map
    "c" '("Python" . (keymap))

    "c i" '("Interactive shell" . run-python)
    "c c" '("Python3 command" .
            (lambda () (interactive)
              (async-shell-command (concat "python3 " (read-from-minibuffer "python3 ")))
              ))

    "c p" '("Set pyenv version" . pyenv-mode-set)
    "c P" '("Disable pyenv" . pyenv-mode-unset)
    )
#+end_src

* Misc. languages
** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    )
#+end_src
